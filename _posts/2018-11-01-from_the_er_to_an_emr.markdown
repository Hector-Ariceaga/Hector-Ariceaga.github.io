---
layout: post
title:      "From the ER to an EMR"
date:       2018-11-01 19:02:42 -0400
permalink:  from_the_er_to_an_emr
---

The last two and a half weeks have been a blur. After contracting pneumonia in both of my lungs and landing myself in the emergency room, I was placed on bed rest and started on a handful of medications. What was supposed to be one week of rest turned into two. Poor sleep, and a cough that left me ragged, had made my mind cloudy. It was difficult for me sit up for long, let along walk around. Of course, this happened right as I was about to start constructing my rails application. I was eager to recover at least enough to jot down a few lines of code as I sipped soup and ate Saltines. Slowly, I did start to recover and bit by bit my application came together as I coded, when I felt well enough to do so. As my mind cleared, hang-ups and bugs in my code that seemed insurmountable before slowly became workable. The irony was not lost on me that as I sat in bed ill I was working on creating a simplified version of an EMR (Electronic Medical Record), the same type of software that physicians and hospitals use to record patient's medical histories.

My project was initially small, but with more time came more features and the finished product is one that I am very proud of. I am excited about the successful implementation of nested resources and routes in conjunction with a database that contains several models and relationships. In addition, I spent more time developing the front-end than I had initially intended. The result of which, I believe, is a pleasing aesthetic.

To solve some of the problems I was running into, I spent a good amount of time reading through similar problems on Stack Overflow, combing through Rails documentation, and looking at source code for other applications. Ultimately, I was able to take away far more than just potential solutions to my initial problems. Increased exposure to broken code and working through fixes was slowly improving my confidence to debug and fix my future code. Towards the end of developing my application I found the solutions to complex problems were coming to me quicker as my logic became clearer. My proper use of rails methods and helpers increased, and my ability to predict why certain parts of my code would or would not function as expected, improved.  Ultimately, completing this project greatly enhanced my understanding of the Rails framework. In large part I attribute this to having the time to implement features and experiment with methods I haven't used before.

Although getting seriously ill immediately prior to undertaking a large project such as this wasn't my plan ,and surely wasn't ideal, it did give me the opportunity to look at my code with varying degrees of clarity and problem solve accordingly. In many ways the completion of this project is a testament to my love of working with code, as it was one of the first things I strove to do as I recovered. As I continue to recover, I will gladly leave behind all the nasty symptoms that kept me bedridden. However, I am fortunate enough to have this project as a lasting symbol of my passion to code and as a reminder that good work can be done, even when we are not at our best.

